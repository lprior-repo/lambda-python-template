[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lambda-python-template"
version = "1.0.0"
description = "AWS Lambda Python Template with Advanced Patterns - Serverless Best Practices Blueprint"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.13",
]
keywords = ["aws lambda", "serverless", "python template", "best practices", "powertools"]

dependencies = [
    # Core AWS dependencies
    "aws-lambda-powertools[tracer,validation]>=3.7.0",
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    # Data validation and modeling
    "pydantic>=2.0.3",
    "email-validator",
    # Configuration and environment management
    "aws-lambda-env-modeler",
    "cachetools",
    # Typing support
    "mypy-boto3-dynamodb",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest",
    "pytest-mock",
    "pytest-cov",
    "pytest-html",
    "pytest-benchmark",
    "python-dateutil",
    "python-dotenv",
    # Code quality and formatting
    "ruff",
    "mypy",
    "pre-commit",
    # Security and complexity analysis
    "bandit",
    "radon",
    "xenon",
    # Type checking
    "types-cachetools",
    "types-requests",
    # Utilities
    "toml",
    "GitPython",
    # Documentation
    "mkdocs-material",
    "mkdocs-git-revision-date-plugin",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "benchmark: Performance benchmark tests"
]

[tool.ruff]
# Exclude commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "terraform",
    ".pytest_cache",
    ".coverage"
]

# Same as Black
line-length = 150
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable comprehensive linting rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "N",  # pep8-naming
    "UP", # pyupgrade
    "S",  # bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

ignore = [
    "E203",   # whitespace before ':'
    "E266",   # too many leading '#' for block comment
    "E501",   # line too long
    "W191",   # indentation contains tabs
    "S101",   # Use of assert detected
    "S104",   # Possible binding to all interfaces
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
known-third-party = ["pydantic", "aws_lambda_powertools", "boto3", "botocore"]
known-first-party = ["src"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "PLR0913"]  # Allow assert and magic values in tests
"**/models/*.py" = ["A003"]  # Allow shadowing builtins in models

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "aws_lambda_powertools.*",
    "boto3.*",
    "botocore.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/test_*.py",
    "*/tests/*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
precision = 2

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "terraform"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
